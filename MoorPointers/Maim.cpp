#include<iostream>
// Урок 45. Больше об указателях:



int main() {
	setlocale(LC_ALL, "RU");
	int n, m;

	// нейтральный указатели:
	
	// int* pn1 = &n; // - это нейтральный указатель (Способ 1 - неактуальный, так как из языка Си обладает одной проблемой - Непонятно это переменная или адрес).

	// int* pn2 = NULL; // Способ 2. Решает часть проблем, но проблема осталась. NULL - тоже что ноль, только текстом. 
	// Мы должны понимать что инициализирован указатель (договоренность для инициализ. нейтрального адреса, введены такие правила)

	int* pn3 = nullptr; // Способ 3. Актуальный. Самый правильный способ инициалазации нейтрального указателя.
	// (nullptr - это ноль, обладающий своим собственным типом данным. Если видим nullptr, то это точно указатель)
	// std::cerr << "Ошибка!!!" - это отслеживание ошибки.


	if (pn3 != nullptr)
		std::cout << "pn3 = " << pn3 << std::endl;
	else
		std::cout << "Ошибка!!! Указатель не инициализирован!\n";
	

	// Модификация указателей (const, unsigned, static)

	// Типы констант указателей (3 типа):
	n = 7, m = 15;

	// Указатель на константу: 
	// 1 Тип. Может быть объявлен без инициализации и может быть нгаправлен в другую область памяти,
	// но с его помощью НЕЛЬЗЯ менять значение памяти, на которую он направлен.
	const int* pointer1; // можно не инициализировать
	pointer1 = &m;
	pointer1 = &n;
	// *pointer1 = 10; // Ошибка!!!
	std::cout << *pointer1 << std::endl;

	// 2 Тип - Константный указатель или указатель-констнта.
	// Не может быть объявлен без инициализации и не может быть перенаправлен на другую область памяти,
	// но с его помощью можно менять значения памяти, на которую он направлен.
	int* const pointer2 = &n; // нужно инициализировать сразу! 
	// pointer2 = &m; // ОШИБКА! Его нельзя перенаправлять на другую область памяти.
	*pointer2 = 10;
	std::cout << n << std::endl;

	// например:
	//arr[3]
	
	
	// 3 Тип. Константный указатель на константу.
	// Не может быть объявлен без инициализации и не может быть направлен на другую область памяти.
	// С его помощью не льзя менять область памяти, на которую он направлен.
	const int* const pointer3 = &n;
	// pointer3 = &m;	// ОШИБКА!
	// *pointer3 = 42; // ОШИБКА!
	std::cout << *pointer3 << std::endl; // можем только вывести в консоль.



	return 0;
}